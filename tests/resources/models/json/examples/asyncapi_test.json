{
    "asyncapi": "2.1.0",
    "info": {
        "title": "AsyncAPI Test",
        "description": "The file is an example",
        "version": "1.0.0"
    },
    "servers": {
        "dev": {
            "url": "broker.dev:5672",
            "description": "Development server",
            "protocol": "amqp",
            "protocolVersion": "0.9.1"
        },
        "test": {
            "url": "broker.test:5672",
            "description": "Test server",
            "protocol": "amqp",
            "protocolVersion": "0.9.1"
        }
    },
    "channels": {
        "xxy.{param1}.yyx.{param2}": {
            "description": "First channel",
            "parameters": {
                "param1": {
                    "description": "a param",
                    "schema": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "param2": {
                    "description": "another param",
                    "schema": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "publish": {
                "operationId": "writeXxxData2",
                "summary": "published to that endpoint and trigger the endpoint",
                "message": {
                    "payload": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "format": "uuid "
                                },
                                "job": {
                                    "$ref": "./model_with_bytes.json#/definitions/Job"
                                },
                                "valid": {
                                    "type": "boolean"
                                }
                            }    
                        }
                    }
                },
                "bindings": {
                    "amqp": {
                        "exchange": {
                            "name": "zzz",
                            "type": "topic"
                        }
                    }
                },
                "x-subscriber-implementation": {
                    "x-queue": {
                        "type": "classic",
                        "durable": false,
                        "exclusive": false
                    }
                }
            }
        },
        "xxx.{param1}.yyy.{param2}": {
            "description": "First channel",
            "parameters": {
                "param1": {
                    "description": "a param",
                    "schema": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "param2": {
                    "description": "another param",
                    "schema": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "publish": {
                "operationId": "writeXxxData",
                "summary": "published to that endpoint and trigger the endpoint",
                "message": {
                    "payload": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "string",
                                "format": "uuid "
                            },
                            "job": {
                                "$ref": "./model_with_bytes.json#/definitions/Job"
                            }
                        }
                    }
                },
                "bindings": {
                    "amqp": {
                        "exchange": {
                            "name": "zzz",
                            "type": "topic"
                        }
                    }
                },
                "x-subscriber-implementation": {
                    "x-queue": {
                        "type": "classic",
                        "durable": false,
                        "exclusive": false
                    }
                }
            }
        },
        "aaa.{param3}": {
            "description": "endpoint triggers something",
            "parameters": {
                "param3": {
                    "description": "yet another param",
                    "schema": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "publish": {
                "operationId": "triggerAaa",
                "summary": "publish to this endpoint to trigger something",
                "message": {
                    "payload": {
                        "$ref": "./model_with_bytes.json#/definitions/Job"
                    }
                },
                "bindings": {
                    "amqp": {
                        "exchange": {
                            "name": "zzz",
                            "type": "topic"
                        }
                    }
                },
                "x-subscriber-implementation": {
                    "x-queue": {
                        "type": "classic",
                        "durable": false,
                        "exclusive": false
                    }
                }
            }
        },
        "tt.getAll": {
            "publish": {
                "operationId": "ttGetAll",
                "summary": "get all stored tt's",
                "message": {
                },
                "x-responseMessage": {
                    "description": "collection of requested items",
                    "type": "array",
                    "items": {
                        "$ref": "./simple_allof.json"
                    }
                },
                "bindings": {
                    "amqp": {
                        "exchange": {
                            "name": "{ttServiceId}",
                            "type": "topic",
                            "replyTo": "dynamicQueueName"
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Order": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "petId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "shipDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "$ref": "#/components/schemas/OrderStatusEnum"
                    },
                    "complete": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "xml": {
                    "name": "Order"
                }
            },
            "OrderStatusEnum": {
                "type": "string",
                "description": "Order Status",
                "enum": [
                    "placed",
                    "approved",
                    "delivered"
                ]
            },
            "Category": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Category"
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "userStatus": {
                        "$ref": "./ExternalEnum.json"
                    }
                },
                "xml": {
                    "name": "User"
                }
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Tag"
                }
            },
            "PetStatusEnum": {
                "type": "string",
                "description": "pet status in the store",
                "enum": [
                    "available",
                    "pending",
                    "sold"
                ]
            },
            "Pet": {
                "required": [
                    "name",
                    "photoUrls"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    },
                    "name": {
                        "type": "string",
                        "example": "doggie"
                    },
                    "photoUrls": {
                        "type": "array",
                        "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                        },
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "xml": {
                            "name": "tag",
                            "wrapped": true
                        },
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "status": {
                        "description": "pet status in the store",
                        "$ref": "#/components/schemas/PetStatusEnum"
                    },
                    "externalEnum": {
                        "description": "a enum field, that reference to another model",
                        "$ref": "schema_with_external_ref.json#/definitions/DemoEnum"
                    }
                },
                "xml": {
                    "name": "Pet"
                }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        },
        "channelBindings": {
            "myChannelBinding1": {
                "amqp": {
                    "is": "routingKey",
                    "exchange": {
                        "name": "xxx",
                        "type": "topic",
                        "durable": true
                    },
                    "queue": {
                        "name": "myQueue-xxx",
                        "durable": true,
                        "exclusive": true,
                        "autoDelete": true
                    }
                }
            },
            "myChannelBinding2": {
                "amqp": {
                    "is": "queue",
                    "queue": {
                        "name": "myQueue-1"
                    }
                }
            },
            "myChannelBinding4": {
                "amqp": {
                    "exchange": {
                        "name": "xxy",
                        "type": "fanout",
                        "durable": true,
                        "autodelete": true
                    }
                }
            },
            "myChannelBinding5": {
                "kafka": {
                    "exchange": {
                        "name": "xxy",
                        "type": "fanout",
                        "durable": true,
                        "autodelete": true
                    }
                }
            }
        },
        "messageBindings": {
            "msgBinding1": {
                "amqp": {
                    "contentEncoding": "UTF-8",
                    "messageType": "typenamestring"
                }
            }
        },
        "operationBindings":{
            "opBinding1": {
                "amqp": {
                    "expiration": 10,
                    "replyTo": "test-reply-to"
                }
            },
            "opBinding2": {
                "amqp": {
                    "mandatory": true
                }
            }
        }
    }
}