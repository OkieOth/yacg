{
    "openapi": "3.0.1",
    "info": {
      "title": "Swagger Petstore",
      "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
      "termsOfService": "http://swagger.io/terms/",
      "contact": {
        "email": "apiteam@swagger.io"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "1.0.0"
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    },
    "servers": [
      {
        "url": "https://petstore.swagger.io/v2"
      },
      {
        "url": "http://petstore.swagger.io/v2"
      }
    ],
    "tags": [
      {
        "name": "pet",
        "description": "Everything about your Pets",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      },
      {
        "name": "store",
        "description": "Access to Petstore orders"
      },
      {
        "name": "user",
        "description": "Operations about user",
        "externalDocs": {
          "description": "Find out more about our store",
          "url": "http://swagger.io"
        }
      }
    ],
    "paths": {
      "/pet": {
        "put": {
          "tags": [
            "pet"
          ],
          "summary": "Update an existing pet",
          "operationId": "updatePet",
          "requestBody": {
            "description": "Pet object that needs to be added to the store",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./more_sophisticated_allof.json"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "required": true
          },
          "responses": {
            "400": {
              "description": "Invalid ID supplied",
              "content": {}
            },
            "404": {
              "description": "Pet not found",
              "content": {}
            },
            "405": {
              "description": "Validation exception",
              "content": {}
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "post": {
          "tags": [
            "pet"
          ],
          "summary": "Add a new pet to the store",
          "operationId": "addPet",
          "requestBody": {
            "description": "Pet object that needs to be added to the store",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "required": true
          },
          "responses": {
            "405": {
              "description": "Invalid input",
              "content": {}
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/pet/findByStatus": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by status",
          "description": "Multiple status values can be provided with comma separated strings",
          "operationId": "findPetsByStatus",
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status values that need to be considered for filter",
              "required": true,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "available",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ]
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/xml": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid status value",
              "content": {}
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        }
      },
      "/pet/findByTags": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by tags",
          "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "parameters": [
            {
              "name": "tags",
              "in": "query",
              "description": "Tags to filter by",
              "required": true,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/xml": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid tag value",
              "content": {}
            }
          },
          "deprecated": true,
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        }
      },
      "/pet/{petId}": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Find pet by ID",
          "description": "Returns a single pet",
          "operationId": "getPetById",
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "description": "ID of pet to return",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "content": {
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid ID supplied",
              "content": {}
            },
            "404": {
              "description": "Pet not found",
              "content": {}
            }
          },
          "x-security": {
            "scopes": [
              "scope1",
              "scope2"
            ]
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "delete": {
          "tags": [
            "pet"
          ],
          "summary": "Deletes a pet",
          "operationId": "deletePet",
          "parameters": [
            {
              "name": "api_key",
              "in": "header",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "petId",
              "in": "path",
              "description": "Pet id to delete",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied",
              "content": {}
            },
            "404": {
              "description": "Pet not found",
              "content": {}
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "Order": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "petId": {
              "type": "integer",
              "format": "int64"
            },
            "quantity": {
              "type": "integer",
              "format": "int32"
            },
            "shipDate": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "$ref":"#/components/schemas/OrderStatusEnum"
            },
            "complete": {
              "type": "boolean",
              "default": false
            }
          },
          "xml": {
            "name": "Order"
          }
        },
        "OrderStatusEnum": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "Category": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            }
          },
          "xml": {
            "name": "Category"
          }
        },
        "User": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "username": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "userStatus": {
              "$ref": "./ExternalEnum.json"
            }
          },
          "xml": {
            "name": "User"
          }
        },
        "Tag": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            }
          },
          "xml": {
            "name": "Tag"
          }
        },
        "PetStatusEnum": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        },
        "Pet": {
          "required": [
            "name",
            "photoUrls"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "category": {
              "$ref": "#/components/schemas/Category"
            },
            "name": {
              "type": "string",
              "example": "doggie"
            },
            "photoUrls": {
              "type": "array",
              "xml": {
                "name": "photoUrl",
                "wrapped": true
              },
              "items": {
                "type": "string"
              }
            },
            "tags": {
              "type": "array",
              "xml": {
                "name": "tag",
                "wrapped": true
              },
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "status": {
              "description": "pet status in the store",
              "$ref":"#/components/schemas/PetStatusEnum"
            },
            "externalEnum": {
              "description": "a enum field, that reference to another model",
              "$ref":"schema_with_external_ref.json#/definitions/DemoEnum"
            }
          },
          "xml": {
            "name": "Pet"
          }
        },
        "ApiResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "type": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      },
      "securitySchemes": {
        "petstore_auth": {
          "type": "oauth2",
          "flows": {
            "implicit": {
              "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
              "scopes": {
                "write:pets": "modify pets in your account",
                "read:pets": "read your pets"
              }
            }
          }
        },
        "api_key": {
          "type": "apiKey",
          "name": "api_key",
          "in": "header"
        }
      }
    }
  }