
@startuml

class Type {
}

note top: Dummy base class to implement\nstrong typed references

class IntegerType {
        IntegerTypeFormatEnum format 
        IntegerType default 
        IntegerType minimum 
        IntegerType exclusiveMinimum 
        IntegerType maximum 
        IntegerType exclusiveMaximum 
}

note top: integer values

IntegerType --|> Type
enum IntegerTypeFormatEnum {
    INT32
    INT64
}


class NumberType {
        NumberTypeFormatEnum format 
        NumberType default 
        NumberType minimum 
        NumberType exclusiveMinimum 
        NumberType maximum 
        NumberType exclusiveMaximum 
}

note top: floating point values

NumberType --|> Type
enum NumberTypeFormatEnum {
    FLOAT
    DOUBLE
}


class BooleanType {
        BooleanType default 
}

note top: boolean values

BooleanType --|> Type
class StringType {
        StringType default 
}

note top: integer values

StringType --|> Type
class UuidType {
        StringType default 
}

note top: UUID values

UuidType --|> Type
class EnumType {
        StringType version 
        StringType name 
        StringType domain 
        StringType source 
        StringType description 
        StringType[] values 
        StringType default 
        Tag[] tags 
}

note top: type for enum values -\nfixed value types

EnumType --|> Type
class Tag {
        StringType name 
        StringType value 
}

note top: a tag type

class DateType {
        DateType default 
        DateType minimum 
        DateType exclusiveMinimum 
        DateType maximum 
        DateType exclusiveMaximum 
}

note top: type for date values

DateType --|> Type
class DateTimeType {
        DateTimeType default 
        DateTimeType minimum 
        DateTimeType exclusiveMinimum 
        DateTimeType maximum 
        DateTimeType exclusiveMaximum 
}

note top: type for timestamp values

DateTimeType --|> Type
class BytesType {
        BytesType default 
}

note top: type for byte values, it\nwill usually be rendered to\na byte array

BytesType --|> Type
class ComplexType {
        StringType version 
        StringType name 
        StringType description 
        StringType domain 
        StringType source 
        ComplexType extendsType 
        ComplexType[] extendedBy 
        ComplexType[] referencedBy 
        Property[] properties 
        Tag[] tags 
}

note top: complex type description

ComplexType --|> Type
class Property {
        StringType name 
        BooleanType isArray 
        IntegerType arrayMinItems 
        IntegerType arrayMaxItems 
        BooleanType arrayUniqueItems 
        Type type 
        Tag[] tags 
        StringType description 
        BooleanType required 
        IntegerType ordinal 
        BooleanType isKey 
        BooleanType isVisualKey 
        Type foreignKey 
        StringType format 
}

note top: a property of a type


    
    
IntegerType  *--  IntegerTypeFormatEnum        
            
    
    
NumberType  *--  NumberTypeFormatEnum        
            
    
    
    
    
    
EnumType "0" *-- "n" Tag        
            
    
    
    
    
    
ComplexType  *--  ComplexType        
            
ComplexType "0" *-- "n" Property        
            
ComplexType "0" *-- "n" Tag        
            
    
Property  *--  Type        
            
Property "0" *-- "n" Tag        
            

footer \ngenerated with yacg (https://github.com/OkieOth/yacg),\n(template: plantUml.mako v1.1.0)\npowered by plantuml (https://plantuml.com/)
@enduml