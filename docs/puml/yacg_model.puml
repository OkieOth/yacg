
@startuml
hide empty methods
hide empty fields


class "**Type**" as Type {
        ObjectType processing
}
note top: Dummy base class to implement\nstrong typed references

 

class "**ObjectType**" as ObjectType {
}
note top: Straight out of hell -\na undefined object type

ObjectType --|> Type
 

enum "IntegerTypeFormatEnum" as IntegerTypeFormatEnum {
    INT32
    INT64
}

class "**IntegerType**" as IntegerType {
        IntegerTypeFormatEnum format
        IntegerType default
        IntegerType minimum
        IntegerType exclusiveMinimum
        IntegerType maximum
        IntegerType exclusiveMaximum
}
note top: integer values

IntegerType --|> Type
 

enum "NumberTypeFormatEnum" as NumberTypeFormatEnum {
    FLOAT
    DOUBLE
}

class "**NumberType**" as NumberType {
        NumberTypeFormatEnum format
        NumberType default
        NumberType minimum
        NumberType exclusiveMinimum
        NumberType maximum
        NumberType exclusiveMaximum
}
note top: floating point values

NumberType --|> Type
 

class "**BooleanType**" as BooleanType {
        BooleanType default
}
note top: boolean values

BooleanType --|> Type
 

class "**StringType**" as StringType {
        StringType default
        NumberType minLength
        NumberType maxLength
        StringType pattern
        StringType format
}
note top: integer values

StringType --|> Type
 

class "**UuidType**" as UuidType {
        StringType default
}
note top: UUID values

UuidType --|> Type
 


class "**Tag**" as Tag {
        StringType name
        StringType value
}
note top: a tag type

 

class "**EnumType**" as EnumType {
        StringType version
        StringType name
        StringType domain
        StringType source
        StringType description
        Type type
        NumberType[] numValues
        StringType[] values
        Map<StringType> valuesMap
        StringType default
        BooleanType topLevelType
        Tag[] tags
}
note top: type for enum values -\nfixed value types

EnumType --|> Type
 

class "**DateType**" as DateType {
        DateType default
        DateType minimum
        DateType exclusiveMinimum
        DateType maximum
        DateType exclusiveMaximum
}
note top: type for date values

DateType --|> Type
 

class "**TimeType**" as TimeType {
        TimeType default
        TimeType minimum
        TimeType exclusiveMinimum
        TimeType maximum
        TimeType exclusiveMaximum
}
note top: type for time values

TimeType --|> Type
 

class "**DateTimeType**" as DateTimeType {
        DateTimeType default
        DateTimeType minimum
        DateTimeType exclusiveMinimum
        DateTimeType maximum
        DateTimeType exclusiveMaximum
}
note top: type for timestamp values

DateTimeType --|> Type
 

class "**DurationType**" as DurationType {
        DateType default
}
note top: type for date values

DurationType --|> Type
 

class "**BytesType**" as BytesType {
        BytesType default
}
note top: type for byte values, it\nwill usually be rendered to\na byte array

BytesType --|> Type
 

class "**ComplexType**" as ComplexType {
        StringType version
        StringType name
        StringType description
        StringType domain
        StringType source
        ComplexType extendsType
        ComplexType[] extendedBy
        ComplexType[] referencedBy
        Property[] properties
        BooleanType topLevelType
        Tag[] tags
}
note top: complex type description

ComplexType --|> Type
 

class "**Property**" as Property {
        StringType name
        BooleanType isArray
        IntegerType arrayDimensions
        ArrayConstraints[] arrayConstraints
        Type type
        Tag[] tags
        StringType description
        BooleanType required
        IntegerType ordinal
        BooleanType isKey
        BooleanType isVisualKey
        Type foreignKey
        StringType format
        ObjectType processing
}
note top: a property of a type

 

class "**DictionaryType**" as DictionaryType {
        StringType version
        StringType name
        StringType description
        StringType domain
        StringType source
        ComplexType[] referencedBy
        Type valueType
        BooleanType topLevelType
        Tag[] tags
}
note top: key/value dictionary type. Keys are\nalways strings, the value type\ncan be specified

DictionaryType --|> Type
 

class "**ArrayConstraints**" as ArrayConstraints {
        IntegerType arrayMinItems
        IntegerType arrayMaxItems
        BooleanType arrayUniqueItems
}

 

class "**ArrayType**" as ArrayType {
        StringType version
        StringType name
        StringType description
        StringType domain
        StringType source
        ComplexType[] referencedBy
        Type itemsType
        BooleanType topLevelType
        Tag[] tags
        ArrayConstraints[] arrayConstraints
        IntegerType arrayDimensions
}
note top: Array type

ArrayType --|> Type
 

class "**ForeignKey**" as ForeignKey {
        Type type
        StringType propertyName
        Property property
}
note top: Type describes the reference of\na property to another field\nin the model

 


    

    
    
    






    
    






    

    





    

    
    


    





EnumType  *--  Type






EnumType "0" *-- "n" Tag

    





    





    





    

    

    





ComplexType  *--  ComplexType

ComplexType "0" *-- "n" ComplexType

ComplexType "0" *-- "n" ComplexType

ComplexType "0" *-- "n" Property


ComplexType "0" *-- "n" Tag

    



Property "0" *-- "n" ArrayConstraints

Property  *--  Type

Property "0" *-- "n" Tag






Property  *--  Type



    





DictionaryType "0" *-- "n" ComplexType

DictionaryType  *--  Type


DictionaryType "0" *-- "n" Tag

    



    





ArrayType "0" *-- "n" ComplexType

ArrayType  *--  Type


ArrayType "0" *-- "n" Tag

ArrayType "0" *-- "n" ArrayConstraints


    
ForeignKey  *--  Type


ForeignKey  *--  Property


footer \ngenerated with yacg (https://github.com/OkieOth/yacg),\n(template: plantUml.mako v1.1.0)\npowered by plantuml (https://plantuml.com/)
@enduml